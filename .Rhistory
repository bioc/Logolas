"three", "four", "five", "six", "seven", "eight", "nine", "dot", "comma",
"dash", "colon", "semicolon", "leftarrow", "rightarrow")
total_chars <- paste0(total_chars, "letter")
total_chars
chars
devtools::document()
source('~/Documents/Logolas/R/makemylogo.R')
makemylogo("KUSHAL", colfill=c("orange", "green", "red"))
source('~/Documents/Logolas/R/makemylogo.R')
makemylogo("KUSHAL", colfill=c("orange", "green", "red"))
makemylogo("KUSHAL", colfill=c("orange", "green", "red"), plot=TRUE)
makemylogo("KUSHAL", colfill=c("orange", "green", "red"), plot=TRUE)
source('~/Documents/Logolas/R/makemylogo.R')
makemylogo("KUSHAL", colfill=c("orange", "green", "red"), plot=TRUE)
makemylogo("KUSSSSHHHHAL", colfill=c("orange", "green", "red"), plot=TRUE)
makemylogo("KUSSSSHHHHAL", colfill=c("orange", "green", "red"), plot=TRUE)
makemylogo("KUSSSSHHHHAL", colfill=c("orange", "green", "red"), plot=TRUE)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
makemylogo("Evening", plot=TRUE, colfill=col_vector)
toupper("Evening")
source('~/Documents/Logolas/R/makemylogo.R')
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
makemylogo("Evening", plot=TRUE, colfill=col_vector)
counts_mat <- rbind(c(0, 10, 100, 60, 20),
c(40, 30, 30, 35, 20),
c(100, 0, 15, 25, 75),
c(10, 30, 20, 50, 70))
colnames(counts_mat) <- c("2012", "2013", "2014", "2015", "2016")
rownames(counts_mat) <- c("MAN", "MAIL", "LAWN", "CAR")
counts_mat
ic=NULL,
hist=FALSE,
cols = col_vector
cols
ic=NULL
hist=FALSE
cols = col_vector
frame_width=NULL
ic.scale=TRUE
alpha=1,
xaxis=TRUE
yaxis=TRUE
xaxis_fontsize=10
xlab_fontsize=15
y_fontsize=15
main_fontsize=16
start=0.001
yscale_change=TRUE
pop_name = NULL
xlab = "X"
ylab = "Information content"
col_line_split="grey80"
cols_per_column = FALSE
addlogos = NULL
addlogos_text = NULL
newpage = TRUE
if(is.null(frame_width)){
message("frame width not provided, taken to be 1")
wt <- rep(1,dim(table)[2])
}
if(!is.null(frame_width)){
if(length(frame_width)==1){
wt <- rep(frame_width, dim(table)[2])
}else{
wt <- frame_width
}
}
if (class(table) == "data.frame"){
table <- as.matrix(table)
}else if (class(table) != "matrix"){
stop("the table must be of class matrix or data.frame")
}
table_mat_norm <-  apply(table, 2, function(x) return(x/sum(x)))
npos <- ncol(table_mat_norm)
if(cols_per_column == TRUE && npos != length(cols)){
stop("if each column has same color, then cols should be of same length as number of positions")
}
chars <- as.character(rownames(table_mat_norm))
if(is.null(frame_width)){
message("frame width not provided, taken to be 1")
wt <- rep(1,dim(table)[2])
}
table <- counts_mat
if(is.null(frame_width)){
message("frame width not provided, taken to be 1")
wt <- rep(1,dim(table)[2])
}
if(!is.null(frame_width)){
if(length(frame_width)==1){
wt <- rep(frame_width, dim(table)[2])
}else{
wt <- frame_width
}
}
if (class(table) == "data.frame"){
table <- as.matrix(table)
}else if (class(table) != "matrix"){
stop("the table must be of class matrix or data.frame")
}
table_mat_norm <-  apply(table, 2, function(x) return(x/sum(x)))
npos <- ncol(table_mat_norm)
if(cols_per_column == TRUE && npos != length(cols)){
stop("if each column has same color, then cols should be of same length as number of positions")
}
chars <- as.character(rownames(table_mat_norm))
if(is.null(ic)){
if(hist==FALSE){
ic <- ic_computer(table_mat_norm, alpha, hist=hist)
}else{
ic <- ic_computer(table, alpha, hist=hist)
}
}
letters <- list(x=NULL,y=NULL,id=NULL,fill=NULL)
npos <- ncol(table_mat_norm)
if (ic.scale){
if(yscale_change){
if(max(ic)<1){ylim <- 1
facs <- ic + 1 - max(ic)}
if(max(ic)>1){ylim <- ceiling(max(ic))
facs <- ic}
}else{
ylim <- ceiling(max(ic))
facs <- ic
}
ylab <- ylab
}else{
ylim <- 1
ylab <- ylab
facs <- rep(1, npos)
}
x.pos <- 0
slash_inds <- grep("/", chars)
table <- counts_mat
ic=NULL
hist=FALSE
cols = col_vector
frame_width=NULL
ic.scale=TRUE
alpha=1
xaxis=TRUE
yaxis=TRUE
xaxis_fontsize=10
xlab_fontsize=15
y_fontsize=15
main_fontsize=16
start=0.001
yscale_change=TRUE
pop_name = NULL
xlab = "X"
ylab = "Information content"
col_line_split="grey80"
cols_per_column = FALSE
addlogos = NULL
addlogos_text = NULL
newpage = TRUE
if(is.null(frame_width)){
message("frame width not provided, taken to be 1")
wt <- rep(1,dim(table)[2])
}
if(!is.null(frame_width)){
if(length(frame_width)==1){
wt <- rep(frame_width, dim(table)[2])
}else{
wt <- frame_width
}
}
if (class(table) == "data.frame"){
table <- as.matrix(table)
}else if (class(table) != "matrix"){
stop("the table must be of class matrix or data.frame")
}
table_mat_norm <-  apply(table, 2, function(x) return(x/sum(x)))
npos <- ncol(table_mat_norm)
if(cols_per_column == TRUE && npos != length(cols)){
stop("if each column has same color, then cols should be of same length as number of positions")
}
chars <- as.character(rownames(table_mat_norm))
if(is.null(ic)){
if(hist==FALSE){
ic <- ic_computer(table_mat_norm, alpha, hist=hist)
}else{
ic <- ic_computer(table, alpha, hist=hist)
}
}
letters <- list(x=NULL,y=NULL,id=NULL,fill=NULL)
npos <- ncol(table_mat_norm)
if (ic.scale){
if(yscale_change){
if(max(ic)<1){ylim <- 1
facs <- ic + 1 - max(ic)}
if(max(ic)>1){ylim <- ceiling(max(ic))
facs <- ic}
}else{
ylim <- ceiling(max(ic))
facs <- ic
}
ylab <- ylab
}else{
ylim <- 1
ylab <- ylab
facs <- rep(1, npos)
}
x.pos <- 0
slash_inds <- grep("/", chars)
chars
seq_len(npos)
column <- table_mat_norm[,j]
hts <- as.numeric(0.99*column*facs[j])
letterOrder <- order(hts)
y.pos <- 0
j ,-
j <- 1
column <- table_mat_norm[,j]
hts <- as.numeric(0.99*column*facs[j])
letterOrder <- order(hts)
y.pos <- 0
seq_along(chars)
chars
letter <- chars[letterOrder[i]]
col <- cols[letterOrder[i]]
i <- 1
letter <- chars[letterOrder[i]]
letter
col <- cols[letterOrder[i]]
col
col <- col_vector
out <- makemylogo(letter,
colfill = col,
addlogos=addlogos,
addlogos_text = addlogos_text)
out <- makemylogo(letter,
colfill = col,
addlogos=addlogos,
addlogos_text = addlogos_text, plot=TRUE)
out <- makemylogo(letter,
colfill = col,
addlogos=addlogos,
addlogos_text = addlogos_text, plot=TRUE)
source('~/Documents/Logolas/R/makemylogo.R')
out <- makemylogo(letter,
colfill = col,
addlogos=addlogos,
addlogos_text = addlogos_text, plot=TRUE)
out <- makemylogo(letter,
colfill = col,
addlogos=addlogos,
addlogos_text = addlogos_text, plot=TRUE)
color_profile <- data.frame("type" = "per_symbol",
"col" = col_vector)
logomaker(counts_mat, col=color_profile)
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
source('~/Documents/Logolas/R/logomaker.R')
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
source('~/Documents/Logolas/R/logomaker.R')
color_profile <- data.frame("type" = "per_symbol",
"col" = col_vector)
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile$type
color_profile <- list("type" = "per_symbol",
"col" = col_vector)
color_profile
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_column",
"col" = col_vector[1:5])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_string",
"col" = col_vector[1:4])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_symbol",
"col" = col_vector)
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_string",
"col" = col_vector[1:4])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_string",
"col" = col_vector)
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_string",
"col" = col_vector[1:4])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile$col
source('~/Documents/Logolas/R/logomaker.R')
color_profile <- list("type" = "per_string",
"col" = col_vector[1:4])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
total_chars
source('~/Documents/Logolas/R/makemylogo.R')
color_profile <- list("type" = "per_symbol",
"col" = col_vector)
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_string",
"col" = col_vector[1:4])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_column",
"col" = col_vector[1:5])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_column",
"col" = col_vector[1:5])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
color_profile <- list("type" = "per_row",
"col" = col_vector[1:4])
logomaker(counts_mat,
color_profile = color_profile,
frame_width = 1,
ic.scale = FALSE)
library(Logolas)
cols = RColorBrewer::brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, cols$maxcolors, rownames(cols)))
col_vector = unlist(mapply(RColorBrewer::brewer.pal, cols$maxcolors, rownames(cols)))
cols = RColorBrewer::brewer.pal.info[RColorBrewer::brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(RColorBrewer::brewer.pal, cols$maxcolors, rownames(cols)))
cols = RColorBrewer::brewer.pal.info[RColorBrewer::brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(RColorBrewer::brewer.pal, cols$maxcolors, rownames(cols)))
set.seed(20)
color_profile <- list("type" = "per_symbol",
"col" = col_vector[1:dim(table)[1]])
logomaker(table,
color_profile = color_profile,
total_chars = total_chars,
frame_width = 1,
ic.scale = TRUE,
yscale_change=TRUE,
xlab = "Position",
ylab = "Information content")
mFile <- system.file("Exfiles/pwm1", package="seqLogo")
m <- read.table(mFile)
p <- seqLogo::makePWM(m)
pwm_mat <- slot(p,name = "pwm")
mat1 <- cbind(pwm_mat[,c(3,4)], rep(0,4), pwm_mat[,c(5,6)]);
colnames(mat1) <- c("-2", "-1", "0", "1", "2")
mat2 <- cbind(rep(0,6), rep(0,6),
c(0.5, 0.2, 0.2, 0.05, 0.05, 0),
rep(0,6), rep(0,6))
rownames(mat2) <- c("C>T", "C>A", "C>G",
"T>A", "T>C", "T>G")
table <- rbind(mat1, mat2)
cols = RColorBrewer::brewer.pal.info[RColorBrewer::brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(RColorBrewer::brewer.pal, cols$maxcolors, rownames(cols)))
set.seed(20)
color_profile <- list("type" = "per_row",
"col" = RColorBrewer::brewer.pal(dim(table)[1],name ="Spectral"))
logomaker(table,
color_profile = color_profile,
total_chars = total_chars,
frame_width = 1,
ic.scale = TRUE,
yscale_change=TRUE,
xlab = "Position",
ylab = "Information content")
table
color_profile <- list("type" = "per_row",
"col" = RColorBrewer::brewer.pal(dim(table)[1],name ="Spectral"))
logomaker(table,
color_profile = color_profile,
frame_width = 1,
ic.scale = TRUE,
yscale_change=TRUE,
xlab = "Position",
ylab = "Information content")
cols = RColorBrewer::brewer.pal.info[RColorBrewer::brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(RColorBrewer::brewer.pal, cols$maxcolors, rownames(cols)))
total_chars = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
"P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "zero", "one", "two",
"three", "four", "five", "six", "seven", "eight", "nine", "dot", "comma",
"dash", "colon", "semicolon", "leftarrow", "rightarrow")
set.seed(20)
color_profile <- list("type" = "per_symbol",
"col" = sample(col_vector, length(total_chars), replace=FALSE))
logomaker(table,
color_profile = color_profile,
total_chars = total_chars,
frame_width = 1,
ic.scale = TRUE,
yscale_change=TRUE,
xlab = "Position",
ylab = "Information content")
set.seed(100)
data("himalayan_fauna_3_clusters")
color_profile <- list("type" = "per_column",
"col" = sample(RColorBrewer::brewer.pal(10,name = "Spectral"),
dim(himalayan_fauna_3_clusters)[2], replace=TRUE))
logomaker(himalayan_fauna_3_clusters,
color_profile = color_profile,
frame_width = 1,
ic.scale = TRUE,
pop_name = "Bird family abundance across clusters",
xlab = "Clusters",
ylab = "Information content")
set.seed(20)
data("himalayan_fauna_3_clusters")
color_profile <- list("type" = "per_column",
"col" = sample(RColorBrewer::brewer.pal(10,name = "Spectral"),
dim(himalayan_fauna_3_clusters)[2], replace=TRUE))
logomaker(himalayan_fauna_3_clusters,
color_profile = color_profile,
frame_width = 1,
ic.scale = TRUE,
pop_name = "Bird family abundance across clusters",
xlab = "Clusters",
ylab = "Information content")
devtools::document()
library(Logolas)
library(seqLogo)
mFile <- system.file("Exfiles/pwm1", package="seqLogo")
m <- read.table(mFile)
p <- makePWM(m)
mat1 <- cbind(p@pwm[,c(3,4)], rep(0,4), p@pwm[,c(5,6)]);
colnames(mat1) <- c("-2", "-1", "0", "1", "2")
mat2 <- cbind(rep(0,6), rep(0,6),
c(0.5, 0.2, 0.2, 0.05, 0.05, 0),
rep(0,6), rep(0,6))
rownames(mat2) <- c("C>T", "C>A", "C>G",
"T>A", "T>C", "T>G")
table <- rbind(mat1, mat2)
cols = RColorBrewer::brewer.pal.info[RColorBrewer::brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(RColorBrewer::brewer.pal, cols$maxcolors, rownames(cols)))
total_chars = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
"P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "zero", "one", "two",
"three", "four", "five", "six", "seven", "eight", "nine", "dot", "comma",
"dash", "colon", "semicolon", "leftarrow", "rightarrow")
set.seed(20)
color_profile <- list("type" = "per_symbol",
"col" = sample(col_vector, length(total_chars), replace=FALSE))
logomaker(table,
color_profile = color_profile,
total_chars = total_chars,
frame_width = 1,
ic.scale = TRUE,
yscale_change=TRUE,
xlab = "Position",
ylab = "Information content")
devtools::document()
library(Logolas)
install.packages("knitr")
install.packages("stringi")
install.packages("stringr")
install.packages("knitr")
install.packages("evaluate")
install.packages("devtools")
install.packages("devtools")
library(markdown)
library(ggplot2)
install.packages("ggplot2")
install.packages("markdown")
install.packages("markdown")
library(devtools)
library(ggplot2)
library(Logolas)
library(Logolas)
devtools::document()
update.packages()
devtools::document()
library(Logolas)
devtools::document()
library(Logolas)
source('~/Documents/Logolas/R/makemylogo.R')
devtools::document()
library(Logolas)
devtools::document()
library(Logolas)
BiocCheck::BiocCheck(:../"Logolas")
BiocCheck::BiocCheck("../Logolas")
library(Logolas)
library(Logolas)
devtools::document()
