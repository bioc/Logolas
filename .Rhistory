for (j in 1:npos){
column <- table_mat_norm[,j]
hts <- as.numeric(0.99*column*facs[j])
letterOrder <- order(hts)
y.pos <- 0
for (i in 1:length(chars)){
letter <- chars[letterOrder[i]]
col <- cols[letterOrder[i]]
ht <- hts[letterOrder[i]]
if(length(intersect(letterOrder[i], slash_inds))!=0){
if (ht>0) letters <- addLetter(letters,letter, col, x.pos, y.pos, ht, wt[j], addlogos = addlogos, addlogos_text = addlogos_text)
}else{
if (ht>0) letters <- addLetter(letters,letter, col, x.pos, y.pos, ht, wt[j], addlogos = NULL, addlogos_text = NULL)
}
y.pos <- y.pos + ht + start
}
x.pos <- x.pos + wt[j]
}
x.pos
y.pos
npos
table_mat_norm
letters
letters$x
max(letters$x)
min(letters$y)
max(letters$y)
ylim_scale
xlim <- cumsum(wt) - wt/2;
# xlim <- c(wt[1]/2, wt[1] + wt[2]/2, wt[1]+wt[2]+wt[3]/2, wt[1]+wt[2]+wt[3], 5.5)
low_xlim <- c(xlim - 0.5*wt, xlim[length(xlim)]+0.5*wt[length(xlim)])
ylim_scale <- seq(0, ylim, length.out=6);
ic_lim_scale <- seq(0, max(ic), length.out=6)
ylim_scale
ic_lim_scale
if(yscale_change){
letters$y <- letters$y*(ylim/max(ic));
}
max(letters$y)
yscale_change
source('~/Documents/Logolas/R/logomaker.R')
logomaker(mat,
cols= RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral"),
frame_width = 1,
ic.scale = FALSE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
logomaker(mat,
cols= RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral"),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
mat <- rbind(c(326, 296, 81, 245, 71),
c(258, 228, 55, 273, 90),
c(145, 121, 29, 253, 85),
c(60, 52, 23, 180, 53),
c(150, 191, 63, 178, 63))
rownames(mat) <- c("H3K4ME1", "H3K4ME2", "H3K4ME3", "H3AC", "H4AC")
colnames(mat) <- c("Intergenic",
"Intron",
"Exon, 1000 KB window",
"Gene start, 1000 KB window",
"Gene end, 1000 KB window")
table <- mat
cols= RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral")
frame_width = 1
ic.scale = FALSE
pop_name = "Histone marks prop. abundance in various genomic regions"
xlab = "Genomic regions"
ylab = "Information content"
yscale_change = TRUE
start=0.0001
logomaker(mat,
cols= RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral"),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
logomaker(mat,
cols= rev(RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral")),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
mat <- rbind(c(326, 296, 81, 245, 71),
c(258, 228, 55, 273, 90),
c(145, 121, 29, 253, 85),
c(60, 52, 23, 180, 53),
c(150, 191, 63, 178, 63))
rownames(mat) <- c("H3K4ME1", "H3K4ME2", "H3K4ME3", "H3AC", "H4AC")
colnames(mat) <- c("Intergenic",
"Intron",
"Exon \n 1000 KB window",
"Gene start \n 1000 KB window",
"Gene end \n 1000 KB window")
table <- mat
cols= RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral")
frame_width = 1
ic.scale = FALSE
pop_name = "Histone marks prop. abundance in various genomic regions"
xlab = "Genomic regions"
ylab = "Information content"
yscale_change = TRUE
start=0.0001
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "Genomic regions",
ylab = "Information content",
yscale_change = TRUE)
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "",
ylab = "Information content",
yscale_change = TRUE)
source('~/Documents/Logolas/R/logomaker.R')
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "",
ylab = "Information content",
yscale_change = TRUE,
col_line_split = "black")
devtools::document()
library(Logolas)
devtools::document()
library(Logolas)
mat <- rbind(c(326, 296, 81, 245, 71),
c(258, 228, 55, 273, 90),
c(145, 121, 29, 253, 85),
c(60, 52, 23, 180, 53),
c(150, 191, 63, 178, 63))
rownames(mat) <- c("H3K4ME1", "H3K4ME2", "H3K4ME3", "H3AC", "H4AC")
colnames(mat) <- c("Intergenic",
"Intron",
"Exon \n 1000 KB window",
"Gene start \n 1000 KB window",
"Gene end \n 1000 KB window")
table <- mat
cols= RColorBrewer::brewer.pal(dim(mat)[1],name = "Spectral")
frame_width = 1
ic.scale = FALSE
pop_name = "Histone marks prop. abundance in various genomic regions"
xlab = "Genomic regions"
ylab = "Information content"
yscale_change = TRUE
start=0.0001
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "",
ylab = "Information content",
yscale_change = TRUE,
col_line_split = "black")
logomaker(mat,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"), dim(mat)[1]),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Histone marks prop. abundance in various genomic regions",
xlab = "",
ylab = "Information content",
yscale_change = TRUE,
col_line_split = "black")
library(HimalayanBirdsAbundance)
data("HimalayanBirdsAbundance")
new_counts <- t(exprs(HimalayanBirdsAbundance));
metadata <- pData(HimalayanBirdsAbundance);
elevation_metadata=metadata$Elevation;
east_west_dir = metadata$WorE;
library(Logolas)
out <- CountClust::FitGoMpool(new_counts, K=2, tol=0.1,
burn_trials = 100)
theta <- out$topic_fit$theta
species_names <- rownames(theta)
families <- unlist(lapply(species_names, function(x) return(strsplit(x, "[_]")[[1]][1])))
signature_prob <- matrix(0, length(unique(families)), dim(theta)[2])
for(l in 1:dim(theta)[2]){
signature_prob[,l] <- tapply(theta[,l], factor(families), sum)
}
colSums(signature_prob)
signature_prob[signature_prob < 0.01] = 0
signature_prob <- apply(signature_prob, 2, function(x) return(x/sum(x)))
rownames(signature_prob) <- levels(factor(families))
colnames(signature_prob) <- c("Cluster1", "Cluster 2")
signature_prob
colSums(signature_prob)
setwd("~/Documents/Logolas/vignettes/test")
colnames(signature_prob) <- c("Region 1", "Region 2")
out <- CountClust::FitGoMpool(new_counts, K=3, tol=0.1,
burn_trials = 100)
theta <- out$topic_fit$theta
species_names <- rownames(theta)
families <- unlist(lapply(species_names, function(x) return(strsplit(x, "[_]")[[1]][1])))
signature_prob <- matrix(0, length(unique(families)), dim(theta)[2])
for(l in 1:dim(theta)[2]){
signature_prob[,l] <- tapply(theta[,l], factor(families), sum)
}
colSums(signature_prob)
signature_prob[signature_prob < 0.01] = 0
signature_prob <- apply(signature_prob, 2, function(x) return(x/sum(x)))
rownames(signature_prob) <- levels(factor(families))
colnames(signature_prob) <- c("Cluster1", "Cluster 2", "Cluster 3")
save(signature_prob, file="../../data/himalayan_fauna_3_clusters.rda")
out <- CountClust::FitGoMpool(new_counts, K=2, tol=0.1,
burn_trials = 100)
theta <- out$topic_fit$theta
species_names <- rownames(theta)
families <- unlist(lapply(species_names, function(x) return(strsplit(x, "[_]")[[1]][1])))
signature_prob <- matrix(0, length(unique(families)), dim(theta)[2])
for(l in 1:dim(theta)[2]){
signature_prob[,l] <- tapply(theta[,l], factor(families), sum)
}
colSums(signature_prob)
signature_prob[signature_prob < 0.01] = 0
signature_prob <- apply(signature_prob, 2, function(x) return(x/sum(x)))
rownames(signature_prob) <- levels(factor(families))
colnames(signature_prob) <- c("Cluster 1", "Cluster 2")
save(signature_prob, file="../../data/himalayan_fauna_2_clusters.rda")
get(load("../data/MouseDeng2014.FitGoM.rda"))
setwd("~/Documents/Logolas/vignettes/test")
get(load("../data/MouseDeng2014.FitGoM.rda"))
get(load("../../data/MouseDeng2014.FitGoM.rda"))
dat <- get(load("../../data/himalayan_fauna_3_clusters.rda"))
devtools::use_data(dat, overwrite=TRUE)
himalayan_fauna_3_clusters <- get(load("../../data/himalayan_fauna_3_clusters.rda"))
devtools::use_data(himalayan_fauna_3_clusters, overwrite=TRUE)
himalayan_fauna_2_clusters <- get(load("../../data/himalayan_fauna_2_clusters.rda"))
devtools::use_data(himalayan_fauna_2_clusters, overwrite=TRUE)
devtools::document()
devtools::document()
library(Logolas)
setwd("~/Documents/Logolas/vignettes/test")
himalayan_fauna_3_clusters <- get(load("../../data/himalayan_fauna_3_clusters.rda"))
devtools::use_data(himalayan_fauna_3_clusters, overwrite=TRUE)
himalayan_fauna_2_clusters <- get(load("../../data/himalayan_fauna_2_clusters.rda"))
devtools::use_data(himalayan_fauna_2_clusters, overwrite=TRUE)
data("himalayan_fauna_2_clusters")
himalayan_fauna_2_clusters
data("himalayan_fauna_3_clusters")
himalayan_fauna_3_clusters
devtools::document()
data("himalayan_fauna_3_clusters")
devtools::document()
devtools::document()
data("himalayan_fauna_2_clusters")
data("himalayan_fauna_3_clusters")
library(Logolas)
rm(list=ls())
library(Logolas)
counts_mat <- rbind(c(0, 10, 100, 60, 20),
c(40, 30, 30, 35, 20),
c(100, 0, 15, 25, 75),
c(10, 30, 20, 50, 70)
)
source('~/Documents/Logolas/R/ic_computer.R')
colnames(counts_mat) <- c("2012", "2013", "2014", "2015", "2016")
rownames(counts_mat) <- c("Person1", "Person2", "Person3",
"Person4")
ic_computer(counts_mat, alpha=2)
colnames(counts_mat) <- c("2012", "2013", "2014", "2015", "2016")
rownames(counts_mat) <- c("Person1", "Person2", "Person3",
"Person4")
ic_computer(counts_mat, alpha=1)
source('~/Documents/Logolas/R/ic_computer.R')
ic_computer(counts_mat, alpha=2)
ic_computer(counts_mat, alpha=1)
ic_computer(counts_mat, alpha=10)
devtools::document()
library(Logolas)
library(Logolas)
devtools::document()
library(Logolas)
library(seqLogo)
mFile <- system.file("Exfiles/pwm1", package="seqLogo")
m <- read.table(mFile)
p <- makePWM(m)
seqLogo(p)
m
rownames(m) <- c("A", "C", "G", "T")
colnames(m) <- 1:8
logomaker(m,
cols= RColorBrewer::brewer.pal(dim(mat)[1],
name ="Spectral"),
frame_width = 1,
ic.scale = TRUE,
yscale_change=FALSE,
xlab="position")
rownames(m) <- c("A", "C", "G", "T")
colnames(m) <- 1:8
logomaker(m,
cols= RColorBrewer::brewer.pal(dim(m)[1],
name ="Spectral"),
frame_width = 1,
ic.scale = TRUE,
yscale_change=FALSE,
xlab="position")
library(seqLogo)
mFile <- system.file("Exfiles/pwm1", package="seqLogo")
m <- read.table(mFile)
p <- makePWM(m)
seqLogo(p)
rownames(m) <- c("A", "C", "G", "T")
colnames(m) <- 1:8
logomaker(m,
cols= RColorBrewer::brewer.pal(dim(m)[1],
name ="Spectral"),
frame_width = 1,
ic.scale = TRUE,
yscale_change=FALSE,
xlab="position")
source('~/Documents/Logolas/R/logomaker.R')
rownames(m) <- c("A", "C", "G", "T")
colnames(m) <- 1:8
logomaker(m,
cols= RColorBrewer::brewer.pal(dim(m)[1],name ="Spectral"),
frame_width = 1,
ic.scale = FALSE,
alpha = 2,
xlab="position",
col_line_split = "grey80")
source('~/Documents/Logolas/R/logomaker.R')
rownames(m) <- c("A", "C", "G", "T")
colnames(m) <- 1:8
logomaker(m,
cols= RColorBrewer::brewer.pal(dim(m)[1],name ="Spectral"),
frame_width = 1,
ic.scale = FALSE,
alpha = 2,
xlab="position",
col_line_split = "grey80")
devtools::document()
library(Logolas)
rm(list=ls())
library(Logolas)
ic_computer(m alpha=3)
ic_computer(m, alpha=3)
data("himalayan_fauna_3_clusters")
data("himalayan_fauna_3_clusters")
logomaker(himalayan_fauna_3_clusters,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"),
dim(signature_prob)[1], replace=TRUE),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Bird family abundance across clusters",
xlab = "Clusters",
ylab = "Information content")
data("himalayan_fauna_3_clusters")
logomaker(himalayan_fauna_3_clusters,
cols= sample(RColorBrewer::brewer.pal(10,name = "Spectral"),
dim(himalayan_fauna_3_clusters)[1], replace=TRUE),
frame_width = 1,
ic.scale = TRUE,
pop_name = "Bird family abundance across clusters",
xlab = "Clusters",
ylab = "Information content")
library(aRxiv)
rec1 <- arxiv_search('au:"Matthew Stephens"', limit=50)
library(aRxiv)
rec1 <- arxiv_search('au:"Matthew Stephens"', limit=50)
rec2 <- arxiv_search('au:"John Lafferty"', limit=50)
rec3 <- arxiv_search('au:"Wei Biao Wu"', limit=50)
rec4 <- arxiv_search('au:"Peter Mccullagh"', limit=50)
library(aRxiv)
rec1 <- arxiv_search('au:"Matthew Stephens"', limit=50)
citation("RWeblogo")
install.packages("RWeblogo")
install.packages("RWebLogo")
citation("RWeblogo")
library(RWebLogo)
citation("RWeblogo")
citation("RWebLogo")
source("https://bioconductor.org/biocLite.R")
biocLite("motifStack")
citation("motifStack")
devtools::document()
BiocCheck::BiocCheck("../../../Logolas/")
devtools::document()
BiocCheck::BiocCheck("../../../Logolas/")
BiocCheck::BiocCheck("../../../Logolas/")
BiocCheck::BiocCheck("../../../Logolas/")
BiocCheck::BiocCheck("../../../Logolas/")
devtools::document()
library(Logolas)
BiocCheck::BiocCheck("../../../Logolas/")
BiocCheck::BiocCheck("../../../Logolas/")
BiocCheck::BiocCheck("../../../Logolas/")
p <- makePWM(m)
library(seqLogo)
mFile <- system.file("Exfiles/pwm1", package="seqLogo")
m <- read.table(mFile)
p <- makePWM(m)
p
p
p[[1]]
p@pwm[,c(3,4)]
p[,c(3,4)]
p
class(p)
matrix(p)
as.matrix(p)
p[[1]]
slot(p,name = "pwm")
library(seqLogo)
mFile <- system.file("Exfiles/pwm1", package="seqLogo")
m <- read.table(mFile)
p <- makePWM(m)
pwm_mat <- slot(p,name = "pwm")
mat1 <- cbind(pwm_mat[,c(3,4)], rep(0,4), pwm_mat[,c(5,6)]);
colnames(mat1) <- c("-2", "-1", "0", "1", "2")
mat2 <- cbind(rep(0,6), rep(0,6),
c(0.5, 0.2, 0.2, 0.05, 0.05, 0),
rep(0,6), rep(0,6))
rownames(mat2) <- c("C>T", "C>A", "C>G",
"T>A", "T>C", "T>G")
table <- rbind(mat1, mat2)
table
library(Logolas)
library(Logolas)
biocValid()
library(BiocInstaller)
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
Run the command
remove.packages("BiocInstaller")
remove.packages("BiocInstaller")
remove.packages("BiocInstaller")
source("https://bioconductor.org/biocLite.R")
biocValid()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocInstaller")
library(Logolas)
library(Logolas)
BiocCheck::BiocCheck("../Logolas/")
library(Logolas)
library(Logolas)
devtools::install_github("hadley/pkgdown")
library(pkgdown)
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(Logolas)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(Logolas)
devtools::document()
