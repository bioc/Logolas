gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 1, 1, 0.15, 0.15, 0.5, 0.5, 0.15, 0.15, 1, 1)
y <- c(0,1,1,0.85,0.85,0.6,0.6,0.45,0.45,0.2,0.2,0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,12)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 1, 1, 0.15, 0.15, 0.5, 0.5, 0.15, 0.15, 1, 1)
y <- c(0,1,1,0.85,0.85,0.6,0.6,0.45,0.45,0.15,0.15,0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,12)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 1, 1, 0.15, 0.15, 0.5, 0.5, 0.15, 0.15, 1, 1)
y <- c(0,1,1,0.85,0.85,0.6,0.6,0.40,0.40,0.15,0.15,0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,12)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 1, 1, 0.15, 0.15, 0.5, 0.5, 0.15, 0.15, 1, 1)
y <- c(0,1,1,0.85,0.85,0.58,0.58,0.43,0.43,0.18,0.18,0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,12)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
0.85-0.275
0.425 -.275
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 1, 1, 0.15, 0.15, 0.5, 0.5, 0.15, 0.15, 1, 1)
y <- c(0,1,1,0.85,0.85,0.575,0.575,0.425,0.425,0.15,0.15,0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,12)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 1, 1, 0.15, 0.15, 0.5, 0.5, 0.15, 0.15)
y <- c(0,1,1,0.85,0.85,0.575,0.575,0.425,0.425,0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,10)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
source('~/Documents/Logolas/Fletter.R')
source('~/Documents/Logolas/Eletter.R')
source('~/Documents/Logolas/Fletter.R')
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 0.25, 0.25, 0.75, 0.75, 1, 0, 0.75, 0.75, 0.25, 0)
y <- c(0, 1, 1, 0.6, 0.6, 1, 1, 0, 0, 0.4, 0.4, 0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,10)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 0.25, 0.25, 0.75, 0.75, 1, 0, 0.75, 0.75, 0.25, 0)
y <- c(0, 1, 1, 0.6, 0.6, 1, 1, 0, 0, 0.4, 0.4, 0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,12)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
x <- c(0, 0, 0.25, 0.25, 0.75, 0.75, 1, 1, 0.75, 0.75, 0.25, 0)
y <- c(0, 1, 1, 0.6, 0.6, 1, 1, 0, 0, 0.4, 0.4, 0)
#x <- 0.1*x
#y <- 0.1*y
id <- rep(1,12)
fill_symbol <- TRUE
if(fill_symbol){
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(fill="green",
lwd=1))
}else{
grid.polygon(x, y,
default.unit="native",
id=id,
gp=gpar(col="green",
lwd=10))
}
source('~/Documents/Logolas/Hletter.R')
source('~/Documents/Logolas/Hletter.R')
source('~/.active-rstudio-document')
source('~/Documents/Logolas/Iletter.R')
source('~/Documents/Logolas/Jletter.R')
source('~/Documents/Logolas/Jletter.R')
source('~/Documents/Logolas/Jletter.R')
source('~/Documents/Logolas/Jletter.R')
source('~/Documents/Logolas/Kletter.R')
source('~/Documents/Logolas/Kletter.R')
source('~/Documents/Logolas/Kletter.R')
source('~/Documents/Logolas/Kletter.R')
source('~/Documents/Logolas/Kletter.R')
source('~/Documents/Logolas/Kletter.R')
source('~/Documents/Logolas/Lletter.R')
source('~/Documents/Logolas/Mletter.R')
source('~/Documents/Logolas/Mletter.R')
source('~/Documents/Logolas/Mletter.R')
source('~/Documents/Logolas/Mletter.R')
source('~/Documents/Logolas/Mletter.R')
source('~/Documents/Logolas/Nletter.R')
source('~/Documents/Logolas/Nletter.R')
source('~/Documents/Logolas/Nletter.R')
source('~/Documents/Logolas/Nletter.R')
source('~/Documents/Logolas/Nletter.R')
source('~/Documents/Logolas/Nletter.R')
grid.newpage()
pushViewport(viewport(x=0.5,y=0.5,width=1, height=1,
clip=TRUE))
grid.rect(gp=gpar(col="grey"))
grid.circle(x=0.5, y=0.5, r=0.5, gp=gpar(fill="green"))
grid.circle(x=0.5, y=0.5, r=0.3, gp=gpar(fill="white"))
source('~/Documents/Logolas/Tletter.R')
source('~/Documents/Logolas/Vletter.R')
source('~/Documents/Logolas/Vletter.R')
source('~/Documents/Logolas/Vletter.R')
source('~/Documents/Logolas/Vletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Wletter.R')
source('~/Documents/Logolas/Xletter.R')
source('~/Documents/Logolas/Xletter.R')
source('~/Documents/Logolas/Xletter.R')
source('~/Documents/Logolas/Xletter.R')
source('~/Documents/Logolas/Yletter.R')
source('~/Documents/Logolas/Yletter.R')
setwd("~/Documents/dr-tree/analysis/KDey/R")
out <- as.matrix(read.table("../utilities/Human TFs.txt"))
dim(out)
out[,2]
tf_genes <- as.vector(out[,2])
library(biomaRt)
listMarts(host="www.ensembl.org")
mart <- useMart("ENSEMBL_MART_ENSEMBL",
dataset="hsapiens_gene_ensembl",
host="www.ensembl.org")
out <- getBM(
attributes= c("ensembl_gene_id",
"external_gene_name"),
filters="external_gene_name",
values= tf_genes,
mart= mart)
out
length(tf_genes)
dim(out)
length(unique(out[,2]))
ensembl_out <- getBM(
attributes= c("ensembl_gene_id",
"external_gene_name"),
filters="external_gene_name",
values= tf_genes,
mart= mart)
library(devtools)
install_github("kkdey/GTExV6Brain")
library(GTExV6Brain)
library(ggplot2)
library(CountClust)
counts <- exprs(GTExV6Brain)
meta_data <- pData(GTExV6Brain)
gene_names <- rownames(counts)
gene_names <- sapply(1:length(gene_names), function(x) substring(gene_names[x],1,15))
head(gene_names)
ensembl_out
match(as.character(ensembl_out[,1]), gene_names)
indices <- match(as.character(ensembl_out[,1]), gene_names)
indices
indices <- indices[!is.na(indices)]
indices
length(gene_names)
dim(counts)
counts_tf <- counts[indices,];
dim(counts_tf)
voom_brain_counts_tf <- t(limma::voom(counts_tf)$E)
dim(voom_brain_counts_tf)
out <- as.matrix(read.table("../utilities/Human TFs.txt"))
tf_genes <- as.vector(out[,2])
library(biomaRt)
listMarts(host="www.ensembl.org")
mart <- useMart("ENSEMBL_MART_ENSEMBL",
dataset="hsapiens_gene_ensembl",
host="www.ensembl.org")
ensembl_out <- getBM(
attributes= c("ensembl_gene_id",
"external_gene_name"),
filters="external_gene_name",
values= tf_genes,
mart= mart)
library(devtools)
install_github("kkdey/GTExV6Brain")
library(GTExV6Brain)
library(ggplot2)
library(CountClust)
counts <- exprs(GTExV6Brain)
meta_data <- pData(GTExV6Brain)
gene_names <- rownames(counts)
gene_names <- sapply(1:length(gene_names), function(x) substring(gene_names[x],1,15))
indices <- match(as.character(ensembl_out[,1]), gene_names)
indices <- indices[!is.na(indices)]
counts_tf <- counts[indices,];
voom_brain_counts_tf <- t(limma::voom(counts_tf)$E)
library(pfar)
control <- list(logfile = "brain_tf", maxiter = 3)
out <- pfa(voom_deng_counts_tf, K=6, control = control);
out <- pfa(voom_brain_counts_tf, K=6, control = control);
out <- pfa(voom_brain_counts_tf, K=6, control = control);
setwd("~/Documents/dr-tree/analysis/KDey/R")
library(data.table)
data <- data.frame(fread("../external_data/Treutlin2016/GSE67310_iN_data_log2FPKM_annotated.txt"))
treutlin2016.metadata <- data[-1,1:5]
colnames(treutlin2016.metadata) <- data[1,1:5];
fpkm_data <- data[-1,-(1:5)];
colnames(fpkm_data) <- data[1, -(1:5)]
fpkm_data_numeric <- t(apply(fpkm_data, 1, as.numeric))
dim(fpkm_data_numeric)
colnames(fpkm_data_numeric)[1:5]
fpkm_data_numeric[1:5,1:5]
data <- read.table("../external_data/Treutlin2016/GSE67310_iN_data_log2FPKM_annotated.txt",
header=FALSE)
data[1:5,1:5]
treutlin2016.metadata <- data[-1,1:5]
colnames(treutlin2016.metadata) <- data[1,1:5];
fpkm_data <- data[-1,-(1:5)];
dim(fpkm_data)
fpkm_data[1:5,1:5]
data[1:5,1:10]
treutlin2016.metadata <- data[-1,1:5]
treutlin2016.metadata
fpkm_data <- data[-1,-(1:5)];
colnames(fpkm_data) <- data[1, -(1:5)]
fpkm_data_numeric <- t(apply(fpkm_data, 1, as.numeric))
fpkm_data_numeric[1:5,1:5]
fpkm_data[1:5,1:5]
library(data.table)
data <- read.table("../external_data/Treutlin2016/GSE67310_iN_data_log2FPKM_annotated.txt",
header=TRUE)
data[1:10,1:5]
treutlin2016.metadata <- data[,1:5]
treutlin2016.metadata[1:5,]
fpkm_data <- data[,-(1:5)]
dim(fpkm_data)
fpkm_data[1:5,1:5]
colnames(fpkm_data)
out <- as.matrix(read.table("../utilities/TF_mouse.txt"))
tf_genes <- as.vector(out)
tf_genes
library(data.table)
data <- read.table("../external_data/Treutlin2016/GSE67310_iN_data_log2FPKM_annotated.txt",
header=TRUE)
treutlin2016.metadata <- data[,1:5]
colnames(treutlin2016.metadata) ;
fpkm_data <- data[,-(1:5)]
gene_names <- colnames(fpkm_data)
out <- as.matrix(read.table("../utilities/TF_mouse.txt"))
tf_genes <- as.vector(out)
library(biomaRt)
listMarts(host="www.ensembl.org")
mart <- useMart("ENSEMBL_MART_ENSEMBL", dataset="mmusculus_gene_ensembl", host="www.ensembl.org")
out <- getBM(
attributes= c("ensembl_gene_id",
"external_gene_name"),
filters="ensembl_gene_id",
values= tf_genes,
mart= mart)
gene_names_tf <- out$external_gene_name;
gene_names_tf
match(gene_names_tf, gene_names)
matched_indices <- match(gene_names_tf, gene_names)
matched_indices <- matched_indices[!is.na(matched_indices)]
matched_indices
fpkm_data_tf <- fpkm_data[, matched_indices]
dim(fpkm_data_tf)
voom_treutlin_counts_tf <- log(fpkm_data_tf + 1)
voom_treutlin_counts_tf[1:5,1:5]
fpkm_data_tf[1:5,1:5]
pca_dat <- prcomp(fpkm_data_numeric)$x;
pr_data_frame <- data.frame("PC"=pca_dat,
"labels"=factor(treutlin2016.metadata$time_point,
levels=unique(treutlin2016.metadata$time_point)))
graph1 <- ggplot2::qplot(PC.PC1, PC.PC2,
data=pr_data_frame,
colour=labels)
graph2 <- ggplot2::qplot(PC.PC2, PC.PC3,
data=pr_data_frame,
colour=labels)
graph3 <- ggplot2::qplot(PC.PC1, PC.PC3,
data=pr_data_frame,
colour=labels)
library(grid)
library(gridExtra)
grid.arrange( graph1, graph2, graph3, ncol=2)
pr_data_frame <- data.frame("PC"=pca_dat,
"labels"=factor(treutlin2016.metadata$assignment,
levels=unique(treutlin2016.metadata$assignment)))
graph1 <- ggplot2::qplot(PC.PC1, PC.PC2,
data=pr_data_frame,
colour=labels)
graph2 <- ggplot2::qplot(PC.PC2, PC.PC3,
data=pr_data_frame,
colour=labels)
graph3 <- ggplot2::qplot(PC.PC1, PC.PC3,
data=pr_data_frame,
colour=labels)
library(grid)
library(gridExtra)
grid.arrange( graph1, graph2, graph3, ncol=2)
source("pca_knn.R")
source("knn_block_mstree_dist.R")
source("PCA_KNN_wrap.R")
out_pca_knn <- PCA_KNN_wrap(fpkm_data_numeric, num_neighbors=10)
pr_data_frame <- data.frame("PC"=out_pca_knn,
"labels"=factor(treutlin2016.metadata$assignment,
levels=unique(treutlin2016.metadata$assignment)))
setwd("~/Documents/Logolas")
Image <- readImage('A_draw.png')
require('EBImage')
Image <- readImage('A_draw.png')
Image
display(Image, title='Binary')
y = bwlabel(Image)
display(normalize(y), title='Segmented')
range(Image)
dim(Image)
colorMode(Image)
display(Image[,1])
display(Image[,,1])
display(Image[,,2])
display(Image[,,3])
display(Image[,,4])
colorMode(Image) <- Grayscale
print(Image)
display(Image)
which(Image==0,arr.ind = T)
co-ordinates <- which(Image==0,arr.ind = T)[,1:2]
co_ordinates <- which(Image==0,arr.ind = T)[,1:2]
co_ordinates
dim(co_ordinates)
x_coord <- (co_ordinates[,1] - min(co_ordinates[,1]))/(max(co_ordinates[,1]) - min(co_ordinates[,1]))
y_coord <- (co_ordinates[,2] - min(co_ordinates[,2]))/(max(co_ordinates[,2]) - min(co_ordinates[,2]))
y_coord
x_coord
range(x_coord)
range(y_coord)
plot(x_coord, y_coord)
Image <- 1- Image
co_ordinates <- which(Image==0,arr.ind = T)[,1:2]
x_coord <- (co_ordinates[,1] - min(co_ordinates[,1]))/(max(co_ordinates[,1]) - min(co_ordinates[,1]))
y_coord <- (co_ordinates[,2] - min(co_ordinates[,2]))/(max(co_ordinates[,2]) - min(co_ordinates[,2]))
plot(x_coord, y_coord)
require('EBImage')
Image <- readImage('A_draw.png')
display(Image, title='Binary')
y = bwlabel(Image)
display(normalize(y), title='Segmented')
range(Image)
dim(Image)
which(Image==0)
colorMode(Image)
colorMode(Image) <- Grayscale
print(Image)
co_ordinates <- which(Image==0,arr.ind = T)[,1:2]
x_coord <- (co_ordinates[,1] - min(co_ordinates[,1]))/(max(co_ordinates[,1]) - min(co_ordinates[,1]))
y_coord <- (co_ordinates[,2] - min(co_ordinates[,2]))/(max(co_ordinates[,2]) - min(co_ordinates[,2]))
x_coord <- 1 - x_coord
y_coord <- 1 - y_coord
